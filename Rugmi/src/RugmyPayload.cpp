//---------------------------------------------------------------------------
#define WIN32_LEAN_AND_MEAN  // Exclude rarely-used stuff from Windows headers
#include <windows.h>
#include <tchar.h>
//---------------------------------------------------------------------------
#ifndef _DEBUG
#pragma comment(linker, "/MERGE:.rdata=.text")
#endif  // _DEBUG
//---------------------------------------------------------------------------
#define EXTRACT_PAYLOAD_FUNC_RVA  0x7610
//---------------------------------------------------------------------------
/***************************************************************************/
/* Read shellcode from file                                                */
/***************************************************************************/
BYTE *ReadShellcode(
  const TCHAR *pszFileName,
  unsigned int nMinSize
  )
{
  HANDLE hFile;

  hFile = ::CreateFile(pszFileName, GENERIC_READ, FILE_SHARE_READ, NULL,
                       OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, NULL);
  if (hFile == INVALID_HANDLE_VALUE)
    return NULL;

  BOOL bSuccess = FALSE;
  BYTE *pbCode = NULL;
  DWORD cbCode;

  cbCode = ::GetFileSize(hFile, NULL);
  if ((cbCode != INVALID_FILE_SIZE) && (cbCode > nMinSize))
  {
    pbCode = (BYTE *)::VirtualAlloc(NULL, cbCode, MEM_COMMIT,
                                    PAGE_EXECUTE_READWRITE);
    if (pbCode)
    {
      if (::ReadFile(hFile, pbCode, cbCode, &cbCode, NULL) &&
          (cbCode > nMinSize))
      {
        bSuccess = TRUE;
      }
    }
  }

  ::CloseHandle(hFile);

  if (bSuccess)
    return pbCode;

  if (pbCode)
    ::VirtualFree(pbCode, 0, MEM_RELEASE);

  return NULL;
}
/***************************************************************************/
/* Write data to file                                                         */
/***************************************************************************/
BOOL WriteDataToFile(
  void *pData,
  unsigned int cbData,
  const TCHAR *pszFileName
  )
{
  HANDLE hFile;

  hFile = ::CreateFile(pszFileName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,
                       FILE_FLAG_SEQUENTIAL_SCAN, NULL);
  if (hFile == INVALID_HANDLE_VALUE)
    return FALSE;

  BOOL bSuccess = FALSE;

  DWORD dwBytesWritten;
  if (::WriteFile(hFile, pData, cbData, &dwBytesWritten, NULL) &&
      (dwBytesWritten == cbData))
  {
    bSuccess = TRUE;
  }

  ::CloseHandle(hFile);

  return bSuccess;
}
/***************************************************************************/
/* Check if file exists                                                    */
/***************************************************************************/
BOOL IsFileExists(
  const TCHAR *pszFilePath
  )
{
  return (!(::GetFileAttributes(pszFilePath) & FILE_ATTRIBUTE_DIRECTORY));
}
//---------------------------------------------------------------------------
/***************************************************************************/
/* main                                                                    */
/***************************************************************************/
int _tmain(int argc, TCHAR *argv[])
{
  _tprintf_s(_T("Rugmi payload extractor.\n\n"), argv[0]);

  if (argc != 2)
  {
    _tprintf_s(_T("Usage: %s pngfile\n\n"), argv[0]);
    return 0;
  }

  const TCHAR *pszPngPath = argv[1];

  if (!IsFileExists(pszPngPath))
  {
    _tprintf_s(_T("Error: File \'%s\' not found.\n"), pszPngPath);
    return 1;
  }

  BYTE *pbShellcode;

  pbShellcode = ReadShellcode(_T("PngExtr.bin"), EXTRACT_PAYLOAD_FUNC_RVA);
  if (!pbShellcode)
  {
    _tprintf_s(_T("Error: Failed to load shellcode.\n"));
    return 1;
  }

  BOOL bSuccess = FALSE;
  BYTE *pbPayload = NULL;

  // Extract payload
  void (__cdecl *pfnExtractPayload)(const wchar_t *pszPngPath,
                                    BYTE **ppbPayload);
  *(FARPROC *)&pfnExtractPayload = (FARPROC)(pbShellcode +
                                             EXTRACT_PAYLOAD_FUNC_RVA);
  pfnExtractPayload(pszPngPath, &pbPayload);

  if (pbPayload)
  {
    pbPayload -= sizeof(DWORD);
    DWORD cbPayload = *((DWORD *)pbPayload);

    _tprintf_s(_T("Payload size: %u\n"), cbPayload);

    // Save payload to file
    if (WriteDataToFile(pbPayload, cbPayload, _T("payload.bin")))
    {
      bSuccess = TRUE;
      _tprintf_s(_T("Done!\n"));
    }
    else
    {
      _tprintf_s(_T("Error: Failed to save payload to file.\n"));
    }

    ::VirtualFree(pbPayload, 0, MEM_RELEASE);
  }
  else
  {
    _tprintf_s(_T("Error: Failed to extract payload.\n"));
  }

  ::VirtualFree(pbShellcode, 0, MEM_RELEASE);

  if (!bSuccess)
    return 1;

  return 0;
}
//---------------------------------------------------------------------------

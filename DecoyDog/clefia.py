# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import struct


BLOCK_SIZE = 16
KEY_SIZE = 16
IV_SIZE = 16
NONCE_SIZE = 16

ROUNDS128 = 18

W0_6   = 0xfe000000
W0_24  = 0xffffff80
W7_31  = 0x01ffffff
W25_31 = 0x0000007f


S0 = [
    0x57, 0x49, 0xD1, 0xC6, 0x2F, 0x33, 0x74, 0xFB,
    0x95, 0x6D, 0x82, 0xEA, 0x0E, 0xB0, 0xA8, 0x1C,
    0x28, 0xD0, 0x4B, 0x92, 0x5C, 0xEE, 0x85, 0xB1,
    0xC4, 0x0A, 0x76, 0x3D, 0x63, 0xF9, 0x17, 0xAF,
    0xBF, 0xA1, 0x19, 0x65, 0xF7, 0x7A, 0x32, 0x20,
    0x06, 0xCE, 0xE4, 0x83, 0x9D, 0x5B, 0x4C, 0xD8,
    0x42, 0x5D, 0x2E, 0xE8, 0xD4, 0x9B, 0x0F, 0x13,
    0x3C, 0x89, 0x67, 0xC0, 0x71, 0xAA, 0xB6, 0xF5,
    0xA4, 0xBE, 0xFD, 0x8C, 0x12, 0x00, 0x97, 0xDA,
    0x78, 0xE1, 0xCF, 0x6B, 0x39, 0x43, 0x55, 0x26,
    0x30, 0x98, 0xCC, 0xDD, 0xEB, 0x54, 0xB3, 0x8F,
    0x4E, 0x16, 0xFA, 0x22, 0xA5, 0x77, 0x09, 0x61,
    0xD6, 0x2A, 0x53, 0x37, 0x45, 0xC1, 0x6C, 0xAE,
    0xEF, 0x70, 0x08, 0x99, 0x8B, 0x1D, 0xF2, 0xB4,
    0xE9, 0xC7, 0x9F, 0x4A, 0x31, 0x25, 0xFE, 0x7C,
    0xD3, 0xA2, 0xBD, 0x56, 0x14, 0x88, 0x60, 0x0B,
    0xCD, 0xE2, 0x34, 0x50, 0x9E, 0xDC, 0x11, 0x05,
    0x2B, 0xB7, 0xA9, 0x48, 0xFF, 0x66, 0x8A, 0x73,
    0x03, 0x75, 0x86, 0xF1, 0x6A, 0xA7, 0x40, 0xC2,
    0xB9, 0x2C, 0xDB, 0x1F, 0x58, 0x94, 0x3E, 0xED,
    0xFC, 0x1B, 0xA0, 0x04, 0xB8, 0x8D, 0xE6, 0x59,
    0x62, 0x93, 0x35, 0x7E, 0xCA, 0x21, 0xDF, 0x47,
    0x15, 0xF3, 0xBA, 0x7F, 0xA6, 0x69, 0xC8, 0x4D,
    0x87, 0x3B, 0x9C, 0x01, 0xE0, 0xDE, 0x24, 0x52,
    0x7B, 0x0C, 0x68, 0x1E, 0x80, 0xB2, 0x5A, 0xE7,
    0xAD, 0xD5, 0x23, 0xF4, 0x46, 0x3F, 0x91, 0xC9,
    0x6E, 0x84, 0x72, 0xBB, 0x0D, 0x18, 0xD9, 0x96,
    0xF0, 0x5F, 0x41, 0xAC, 0x27, 0xC5, 0xE3, 0x3A,
    0x81, 0x6F, 0x07, 0xA3, 0x79, 0xF6, 0x2D, 0x38,
    0x1A, 0x44, 0x5E, 0xB5, 0xD2, 0xEC, 0xCB, 0x90,
    0x9A, 0x36, 0xE5, 0x29, 0xC3, 0x4F, 0xAB, 0x64,
    0x51, 0xF8, 0x10, 0xD7, 0xBC, 0x02, 0x7D, 0x8E
]

S1 = [
    0x6C, 0xDA, 0xC3, 0xE9, 0x4E, 0x9D, 0x0A, 0x3D,
    0xB8, 0x36, 0xB4, 0x38, 0x13, 0x34, 0x0C, 0xD9,
    0xBF, 0x74, 0x94, 0x8F, 0xB7, 0x9C, 0xE5, 0xDC,
    0x9E, 0x07, 0x49, 0x4F, 0x98, 0x2C, 0xB0, 0x93,
    0x12, 0xEB, 0xCD, 0xB3, 0x92, 0xE7, 0x41, 0x60,
    0xE3, 0x21, 0x27, 0x3B, 0xE6, 0x19, 0xD2, 0x0E,
    0x91, 0x11, 0xC7, 0x3F, 0x2A, 0x8E, 0xA1, 0xBC,
    0x2B, 0xC8, 0xC5, 0x0F, 0x5B, 0xF3, 0x87, 0x8B,
    0xFB, 0xF5, 0xDE, 0x20, 0xC6, 0xA7, 0x84, 0xCE,
    0xD8, 0x65, 0x51, 0xC9, 0xA4, 0xEF, 0x43, 0x53,
    0x25, 0x5D, 0x9B, 0x31, 0xE8, 0x3E, 0x0D, 0xD7,
    0x80, 0xFF, 0x69, 0x8A, 0xBA, 0x0B, 0x73, 0x5C,
    0x6E, 0x54, 0x15, 0x62, 0xF6, 0x35, 0x30, 0x52,
    0xA3, 0x16, 0xD3, 0x28, 0x32, 0xFA, 0xAA, 0x5E,
    0xCF, 0xEA, 0xED, 0x78, 0x33, 0x58, 0x09, 0x7B,
    0x63, 0xC0, 0xC1, 0x46, 0x1E, 0xDF, 0xA9, 0x99,
    0x55, 0x04, 0xC4, 0x86, 0x39, 0x77, 0x82, 0xEC,
    0x40, 0x18, 0x90, 0x97, 0x59, 0xDD, 0x83, 0x1F,
    0x9A, 0x37, 0x06, 0x24, 0x64, 0x7C, 0xA5, 0x56,
    0x48, 0x08, 0x85, 0xD0, 0x61, 0x26, 0xCA, 0x6F,
    0x7E, 0x6A, 0xB6, 0x71, 0xA0, 0x70, 0x05, 0xD1,
    0x45, 0x8C, 0x23, 0x1C, 0xF0, 0xEE, 0x89, 0xAD,
    0x7A, 0x4B, 0xC2, 0x2F, 0xDB, 0x5A, 0x4D, 0x76,
    0x67, 0x17, 0x2D, 0xF4, 0xCB, 0xB1, 0x4A, 0xA8,
    0xB5, 0x22, 0x47, 0x3A, 0xD5, 0x10, 0x4C, 0x72,
    0xCC, 0x00, 0xF9, 0xE0, 0xFD, 0xE2, 0xFE, 0xAE,
    0xF8, 0x5F, 0xAB, 0xF1, 0x1B, 0x42, 0x81, 0xD6,
    0xBE, 0x44, 0x29, 0xA6, 0x57, 0xB9, 0xAF, 0xF2,
    0xD4, 0x75, 0x66, 0xBB, 0x68, 0x9F, 0x50, 0x02,
    0x01, 0x3C, 0x7F, 0x8D, 0x1A, 0x88, 0xBD, 0xAC,
    0xF7, 0xE4, 0x79, 0x96, 0xA2, 0xFC, 0x6D, 0xB2,
    0x6B, 0x03, 0xE1, 0x2E, 0x7D, 0x14, 0x95, 0x1D
]

CON_128 = [
    0xF56B7AEB, 0x994A8A42, 0x96A4BD75, 0xFA854521,
    0x735B768A, 0x1F7ABAC4, 0xD5BC3B45, 0xB99D5D62,
    0x52D73592, 0x3EF636E5, 0xC57A1AC9, 0xA95B9B72,
    0x5AB42554, 0x369555ED, 0x1553BA9A, 0x7972B2A2,
    0xE6B85D4D, 0x8A995951, 0x4B550696, 0x2774B4FC,
    0xC9BB034B, 0xA59A5A7E, 0x88CC81A5, 0xE4ED2D3F,
    0x7C6F68E2, 0x104E8ECB, 0xD2263471, 0xBE07C765,
    0x511A3208, 0x3D3BFBE6, 0x1084B134, 0x7CA565A7,
    0x304BF0AA, 0x5C6AAA87, 0xF4347855, 0x9815D543,
    0x4213141A, 0x2E32F2F5, 0xCD180A0D, 0xA139F97A,
    0x5E852D36, 0x32A464E9, 0xC353169B, 0xAF72B274,
    0x8DB88B4D, 0xE199593A, 0x7ED56D96, 0x12F434C9,
    0xD37B36CB, 0xBF5A9A64, 0x85AC9B65, 0xE98D4D32,
    0x7ADF6582, 0x16FE3ECD, 0xD17E32C1, 0xBD5F9F66,
    0x50B63150, 0x3C9757E7, 0x1052B098, 0x7C73B3A7
]

CON_192 = [
    0xC6D61D91, 0xAAF73771, 0x5B6226F8, 0x374383EC,
    0x15B8BB4C, 0x799959A2, 0x32D5F596, 0x5EF43485,
    0xF57B7ACB, 0x995A9A42, 0x96ACBD65, 0xFA8D4D21,
    0x735F7682, 0x1F7EBEC4, 0xD5BE3B41, 0xB99F5F62,
    0x52D63590, 0x3EF737E5, 0x1162B2F8, 0x7D4383A6,
    0x30B8F14C, 0x5C995987, 0x2055D096, 0x4C74B497,
    0xFC3B684B, 0x901ADA4B, 0x920CB425, 0xFE2DED25,
    0x710F7222, 0x1D2EEEC6, 0xD4963911, 0xB8B77763,
    0x524234B8, 0x3E63A3E5, 0x1128B26C, 0x7D09C9A6,
    0x309DF106, 0x5CBC7C87, 0xF45F7883, 0x987EBE43,
    0x963EBC41, 0xFA1FDF21, 0x73167610, 0x1F37F7C4,
    0x01829338, 0x6DA363B6, 0x38C8E1AC, 0x54E9298F,
    0x246DD8E6, 0x484C8C93, 0xFE276C73, 0x9206C649,
    0x9302B639, 0xFF23E324, 0x7188732C, 0x1DA969C6,
    0x00CD91A6, 0x6CEC2CB7, 0xEC7748D3, 0x8056965B,
    0x9A2AA469, 0xF60BCB2D, 0x751C7A04, 0x193DFDC2,
    0x02879532, 0x6EA666B5, 0xED524A99, 0x8173B35A,
    0x4EA00D7C, 0x228141F9, 0x1F59AE8E, 0x7378B8A8,
    0xE3BD5747, 0x8F9C5C54, 0x9DCFABA3, 0xF1EE2E2A,
    0xA2F6D5D1, 0xCED71715, 0x697242D8, 0x055393DE,
    0x0CB0895C, 0x609151BB, 0x3E51EC9E, 0x5270B089
]


word_from_bytes = lambda a, b, c, d: \
    ((a & 0xFF) << 24) | ((b & 0xFF) << 16) | ((c & 0xFF) << 8) | (d & 0xFF)


# Convert 16 bytes to word array (big endian)
bytes_to_words = lambda data: list(struct.unpack('>4L', data))


# Convert word array to 16 bytes (big endian)
words_to_bytes = lambda words: struct.pack('>4L', *words)


# Byte order swap
bswap32 = lambda x: \
    ((x & 0xFF) << 24) | ((x & 0xFF00) << 8) | \
    ((x & 0xFF0000) >> 8) | ((x >> 24) & 0xFF)


def mul2(x: int) -> int:
    # multiplicacao em GF(2^8) (p(x) = '11d')
    if (x & 0x80) != 0:
        x ^= 0x0e
    return ((x << 1) | (x >> 7)) & 0xFF


mul4 = lambda x: mul2(mul2(x))
mul6 = lambda x: mul2(x) ^ mul4(x)
mul8 = lambda x: mul2(mul4(x))
mulA = lambda x: mul2(x) ^ mul8(x)


def f0(rk: int, x: int) -> int:

    # Step 1
    t = rk ^ x
    # Step 2
    t0 = S0[(t >> 24) & 0xFF]
    t1 = S1[(t >> 16) & 0xFF]
    t2 = S0[(t >> 8) & 0xFF]
    t3 = S1[t & 0xFF]
    # Step 3
    y0 = (     t0  ^ mul2(t1) ^ mul4(t2) ^ mul6(t3)) & 0xFF
    y1 = (mul2(t0) ^      t1  ^ mul6(t2) ^ mul4(t3)) & 0xFF
    y2 = (mul4(t0) ^ mul6(t1) ^      t2  ^ mul2(t3)) & 0xFF
    y3 = (mul6(t0) ^ mul4(t1) ^ mul2(t2) ^      t3) & 0xFF
    return word_from_bytes(y0, y1, y2, y3)


def f1(rk: int, x: int) -> int:

    # Step 1
    t = rk ^ x
    # Step 2
    t0 = S1[(t >> 24) & 0xFF]
    t1 = S0[(t >> 16) & 0xFF]
    t2 = S1[(t >> 8) & 0xFF]
    t3 = S0[t & 0xFF]
    # Step 3
    y0 = (     t0  ^ mul8(t1) ^ mul2(t2) ^ mulA(t3)) & 0xFF
    y1 = (mul8(t0) ^      t1  ^ mulA(t2) ^ mul2(t3)) & 0xFF
    y2 = (mul2(t0) ^ mulA(t1) ^      t2  ^ mul8(t3)) & 0xFF
    y3 = (mulA(t0) ^ mul2(t1) ^ mul8(t2) ^      t3) & 0xFF
    return word_from_bytes(y0, y1, y2, y3)


def gfn4(r: int, rk: list, x: list) -> list:

    # Step 1
    t0 = x[0]
    t1 = x[1]
    t2 = x[2]
    t3 = x[3]
    # Step 2
    for i in range(r):
        # Step 2.1
        t1 ^= f0(rk[2 * i], t0)
        t3 ^= f1(rk[2 * i + 1], t2)
        t0, t1, t2, t3 = t1, t2, t3, t0
    # Step 3
    return [ t3, t0, t1, t2]


def gfn8(r: int, rk: list, x: list) -> list:

    # Step 1
    t0 = x[0]
    t1 = x[1]
    t2 = x[2]
    t3 = x[3]
    t4 = x[4]
    t5 = x[5]
    t6 = x[6]
    t7 = x[7]
    # Step 2
    for i in range(r):
        # Step 2.1
        t1 ^= f0(rk[4 * i], t0)
        t3 ^= f1(rk[4 * i + 1], t2)
        t5 ^= f0(rk[4 * 1 + 2], t4)
        t7 ^= f1(rk[4 * i + 3], t6)
        # Step 2.2
        t0, t1, t2, t3, t4, t5, t6, t7 = t1, t2, t3, t4, t5, t6, t7, t0
    # Step 3
    return [ t7, t0, t1, t2, t3, t4, t5, t6 ]


def gfn_inv4(r: int, rk: list, x: list) -> list:

    # Step 1
    t0 = x[0]
    t1 = x[1]
    t2 = x[2]
    t3 = x[3]
    # Step 2
    for i in range(r):
        # Step 2.1
        t1 ^= f0(rk[2 * (r - i) - 2], t0)
        t3 ^= f1(rk[2 * (r - i) - 1], t2)
        # Step 2.2
        t0, t1, t2, t3 = t3, t0, t1, t2
    # Step 3
    return [ t1, t2, t3, t0]


def sigma(x: list) -> list:
    y0 = ((x[0] & W7_31)  << 7)  | ((x[1] & W0_6)  >> 25)
    y1 = ((x[1] & W7_31)  << 7)  | (x[3]  & W25_31)
    y2 = (x[0]  & W0_6)          | ((x[2] & W0_24) >> 7)
    y3 = ((x[2] & W25_31) << 25) | ((x[3] & W0_24) >> 7)
    return [ y0, y1, y2, y3 ]


def keyschedule128(k: list) -> (list, list):

    # Step 1
    l = gfn4(12, CON_128, k)

    # Step 2
    wk = k[:]

    rk = [0] * 36

    # Step 3
    for i in range(9):

        t0 = l[0] ^ CON_128[24 + 4 * i]
        t1 = l[1] ^ CON_128[24 + 4 * i + 1]
        t2 = l[2] ^ CON_128[24 + 4 * i + 2]
        t3 = l[3] ^ CON_128[24 + 4 * i + 3]

        l = sigma(l)

        if (i & 1 == 1):
            t0 ^= k[0]
            t1 ^= k[1]
            t2 ^= k[2]
            t3 ^= k[3]

        rk[4 * i] = t0
        rk[4 * i + 1] = t1
        rk[4 * i + 2] = t2
        rk[4 * i + 3] = t3

    return wk, rk


def encrypt128(p: list, wk: list, rk: list) -> list:

    # Step 1
    t = p[:]
    t[1] ^= wk[0]
    t[3] ^= wk[1]
    # Step 2
    y = gfn4(ROUNDS128, rk, t)
    # Step 3
    y[1] ^= wk[2]
    y[3] ^= wk[3]
    return y


def decrypt128(c: list, wk: list, rk: list) -> list:

    # Step 1
    t = c[:]
    t[1] ^= wk[2]
    t[3] ^= wk[3]
    # Step 2
    y = gfn_inv4(ROUNDS128, rk, t)
    # Step 3
    y[1] ^= wk[0]
    y[3] ^= wk[1]
    return y


def encrypt128_cbc(data: bytes, key: bytes, iv: bytes) -> bytes:

    if len(key) != KEY_SIZE:
        raise ValueError('Key must be 16 bytes long')
    if len(iv) != IV_SIZE:
        raise ValueError('IV must be 16 bytes long')
    if len(data) % BLOCK_SIZE != 0:
        raise ValueError('Data must be padded to 16 byte boundary in CBC mode')

    wk, rk = keyschedule128(bytes_to_words(key))

    cv = iv

    enc_data = b''

    # Encrypt blocks
    for p in (data[i : i + BLOCK_SIZE] for i
              in range(0, len(data), BLOCK_SIZE)):

        p = bytearray(p)
        for j in range(BLOCK_SIZE):
            p[j] ^= cv[j]

        c = words_to_bytes(encrypt128(bytes_to_words(p), wk, rk))

        enc_data += c
        cv = c

    return enc_data


def decrypt128_cbc(enc_data: bytes, key: bytes, iv: bytes) -> bytes:

    if len(key) != KEY_SIZE:
        raise ValueError('Key must be 16 bytes long')
    if len(iv) != IV_SIZE:
        raise ValueError('IV must be 16 bytes long')
    if len(enc_data) % BLOCK_SIZE != 0:
        raise ValueError('Data must be padded to 16 byte boundary in CBC mode')

    wk, rk = keyschedule128(bytes_to_words(key))

    cv = iv

    data = b''

    # Decrypt blocks
    for c in (enc_data[i : i + BLOCK_SIZE] for i
              in range(0, len(enc_data), BLOCK_SIZE)):

        p = bytearray(words_to_bytes(decrypt128(bytes_to_words(c), wk, rk)))

        for j in range(BLOCK_SIZE):
            p[j] ^= cv[j]

        data += bytes(p)
        cv = c

    return data


def decrypt128_ctr(enc_data: bytes, key: bytes, nonce: bytes) -> bytes:

    if len(key) != KEY_SIZE:
        raise ValueError('Key must be 16 bytes long')
    if len(nonce) != IV_SIZE:
        raise ValueError('Nonce must be 16 bytes long')

    wk, rk = keyschedule128(bytes_to_words(key))

    n = bytes_to_words(nonce)
    counter = bswap32(n[3])

    data = b''

    # Decrypt blocks
    for c in (enc_data[i : i + BLOCK_SIZE] for i
              in range(0, len(enc_data), BLOCK_SIZE)):

        n[3] = bswap32(counter)
        x = words_to_bytes(encrypt128(n, wk, rk))

        p = bytearray(c)
        for j in range(len(p)):
            p[j] ^= x[j]

        data += bytes(p)
        counter = (counter + 1) & 0xFFFFFFFF

    return data

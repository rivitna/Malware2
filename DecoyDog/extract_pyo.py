# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import sys
import os
import io
import errno
import struct


def mkdirs(dir):
    """Create directory hierarchy."""

    try:
        os.makedirs(dir)

    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise


#
# Main
#
if len(sys.argv) != 2:
    print('Usage: '+ sys.argv[0] + ' filename')
    sys.exit(0)

filename = sys.argv[1]

with io.open(filename, 'rb') as f:
    data = f.read()

destdir = os.path.abspath(filename) + '[0]'

file_count = 0

pos = 0

num_files, = struct.unpack_from(">L", data, pos)
print('Files:', num_files)

pos += 4

while pos < len(data):
    module_name_len, module_size = struct.unpack_from(">2L", data, pos)
    pos += 8

    module_name = data[pos : pos + module_name_len]
    module_name = module_name.decode()
    pos += module_name_len

    print('%s (%d)' % (module_name, module_size))

    module_path = os.path.join(destdir, module_name)
    dir_path = os.path.dirname(module_path)
    mkdirs(dir_path)

    with io.open(module_path, 'wb') as f:
        module_data = data[pos : pos + module_size]
        f.write(module_data)
  
    pos += module_size
    file_count += 1

print('Extracted:', file_count)

# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import io


MUTEXNAME_ADD = 0xEFEF3357


UUID_FMT_STR = \
    '{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}'


MASK32 = 0xFFFFFFFF

add32 = lambda x, y: (x + y) & MASK32

mul32 = lambda x, y: (x * y) & MASK32


# CRC EEPROM
CRC_TABLE = [
    0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 
    0x76DC4190, 0x6B6B51F4, 0x4DB26158, 0x5005713C, 
    0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C, 
    0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C
]


def eeprom_crc(data: bytes) -> int:
    """Compute CRC EEPROM"""

    crc = 0xFFFFFFFF

    for b in data:
        i = (crc & 0x0F) ^ (b & 0x0F)
        crc = (crc >> 4) ^ CRC_TABLE[i];
        i = (crc & 0x0F) ^ (b >> 4);
        crc = (crc >> 4) ^ CRC_TABLE[i];

    return (crc ^ 0xFFFFFFFF)


def mersenne_init(seed: int) -> list:
    """Init pseudorandom number generator (PRNG) Mersenne Twister"""

    twister = 624 * [0]
    twister[0] = seed & MASK32

    for i in range(1, 624):
        twister[i] = add32(mul32(0x6C078965,
                                 twister[i - 1] ^ (twister[i - 1] >> 30)),
                           i)

    return twister


def mersenne_gen(twister: list) -> None:
    """Mersenne Twister.
    Generate (fill) the array of 624 uints with untempered values"""

    for i in range(624):
        v = (twister[i] & 0x80000000) + (twister[(i + 1) % 624] & 0x7FFFFFFF)
        twister[i] = twister[(i + 397) % 624] ^ (v >> 1);
        if (v & 1) != 0:
            twister[i] ^= 0x9908B0DF


def mersenne_get(twister: list, index: int) -> int:
    """Mersenne Twister.
    Return a single number from the array based upon the current index,
    tempering it in the process"""

    if index == 0:
        mersenne_gen(twister)

    v = twister[index]
    v ^= v >> 11
    v ^= (v << 7) & 0x9D2C5680
    v ^= (v << 15) & 0xEFC60000
    v ^= v >> 18

    index = (index + 1) % 624

    return v, index


def make_hwid(comp_name: str, user_name: str, volc_sernum: int) -> int:
    """Make HWID"""

    s = comp_name.upper() + str(volc_sernum) + user_name.upper()
    sysid_data = s.encode('UTF-16LE')
    return eeprom_crc(sysid_data)


def make_uuid_str(seed: int) -> str:
    """Make UUID string"""

    # Init pseudorandom number generator (PRNG) Mersenne Twister
    twister = mersenne_init(seed)

    index = 0

    data0 = []
    for i in range(16):
        v, index = mersenne_get(twister, index)
        data0.append((v >> 20) & 0xFF)

    n1, index = mersenne_get(twister, index)
    n2, index = mersenne_get(twister, index)

    n1 = ((n1 & 0xF) + 0x40) & 0xFF
    n2 = ((n2 % 0x30) - 0x80) & 0xFF

    s = UUID_FMT_STR % \
        (data0[0], data0[1], data0[2], data0[3], data0[4], data0[5], n1,
         data0[7], n2, data0[9], data0[10], data0[11], data0[12], data0[13],
         data0[14], data0[15])

    return s


#
# Main
#
with io.open('sysid.txt', 'rt', encoding='utf-8') as f:
    # Computer name
    comp_name = f.readline().strip()
    # User name
    user_name = f.readline().strip()
    # Volume C serial number (hex)
    volc_sernum = int(f.readline(), 16)

# HWID
hwid = make_hwid(comp_name, user_name, volc_sernum)
print('HWID: %08X' % hwid)

# Mutex name
mutex_name = make_uuid_str(add32(hwid, MUTEXNAME_ADD))
print('Mutex name:', mutex_name)

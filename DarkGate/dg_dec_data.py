
# Custom Base64 tables
BASE64_CHARS1 = \
    b'GYsyiN0PCntRw8TM7ZIcjWH5xp=+hFd91Dfzu6aE3v2AoXgVUKlme4qbkrJOBSLQ'
BASE64_CHARS2 = \
    b'zLAxuU0kQKf3sWE7ePRO2imyg9GSpVoYC6rhlX48ZHnvjJDBNFtMd1I5acwbqT+='


def base64_decode_block(block, encode_table):
    """Base64 decode block (2-4 chars)"""

    if len(block) < 2:
        raise ValueError('Base64 decode error.')

    n = 0

    for i in range(4):
        n <<= 6
        if i < len(block):
            b = encode_table.find(block[i])
            if (b < 0):
                raise ValueError('Base64 invalid char (%02X).' % block[i])
            n |= b

    dec_block = bytes([(n >> 16) & 0xFF, (n >> 8) & 0xFF])
    if len(block) >= 4:
        dec_block += bytes([n & 0xFF])

    return dec_block


def base64_decode(data, encode_table = BASE64_CHARS1):
    """Base64 decode data"""

    dec_data = b''

    for block in (data[i : i + 4] for i in range(0, len(data), 4)):
        # Decode block
        dec_data += base64_decode_block(block, encode_table)

    return dec_data
        

#
# Main
#
if __name__ == '__main__':
    import sys
    import io

    if len(sys.argv) != 2:
        print('Usage: '+ sys.argv[0] + ' file_name')
        sys.exit(0)

    file_name = sys.argv[1]

    with io.open(file_name, 'rb') as f:
        data = f.read()

    dec_data = base64_decode(data, BASE64_CHARS2)

    new_file_name = file_name + '.dec'
    with io.open(new_file_name, 'wb') as f:
        f.write(dec_data)

    print('Done!')

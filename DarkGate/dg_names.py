# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import io
import hashlib


# DarkGate configuration data field "10" value
CFG_MAGIC = 'cabcaC'


NAME_TYPE_LIST = [
    'mainfolder',
    'logsfolder',
    'addonsfolder',
    'settings',
    'resources',
    'binder',
    'minercpu2',
    'supertemp',
    'au3file',
    'mutex',
    'mainhw',
    'update',
    'st2path',
    'st2',
    'a',
    'rnd'
]


RND_NAME_LEN = 7

HEX_DIGITS = 'abcdefKhABCDEFGHW'


def get_md5_customhexdigest(data: bytes) -> str:
    """Get MD5 digest with non-standard digits"""

    res = ''
    h = hashlib.md5(data).digest()
    for b in h:
        res += HEX_DIGITS[(b >> 4) & 0xF] + HEX_DIGITS[b & 0xF]
    return res


def make_quasi_rnd_name(hwid: str, typ: str) -> str:
    """Make quasi-random name"""

    s = typ + hwid + CFG_MAGIC
    hexdigest = get_md5_customhexdigest(s.encode('ascii'))
    return hexdigest[:RND_NAME_LEN].lower()


def make_hwid(product_id: str, cpu_info: str,
              user_name: str, comp_name: str) -> str:
    """Make HWID"""
    s = product_id + cpu_info + user_name + comp_name
    return get_md5_customhexdigest(s.encode('ascii'))


#
# Main
#
with io.open('sysid.txt', 'rt', encoding='utf-8') as f:
    # ProductID
    # HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductID
    product_id = f.readline().strip()
    # CPU info (cpu_name + " @ <N> Cores")
    # HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0\ProcessorNameString
    cpu_info = f.readline().strip()
    # User name
    user_name = f.readline().strip()
    # Computer name
    comp_name = f.readline().strip()

# HWID
hwid = make_hwid(product_id, cpu_info, user_name, comp_name)
print('HWID: \"%s\"' % hwid)

# Quasi-random names
for typ in NAME_TYPE_LIST:
    name = make_quasi_rnd_name(hwid, typ)
    print('\"%s\": \"%s\"' % (typ, name))

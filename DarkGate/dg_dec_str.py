# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# Custom Base64 tables
BASE64_CHARS1 = \
    b'GYsyiN0PCntRw8TM7ZIcjWH5xp=+hFd91Dfzu6aE3v2AoXgVUKlme4qbkrJOBSLQ'
BASE64_CHARS2 = \
    b'zLAxuU0kQKf3sWE7ePRO2imyg9GSpVoYC6rhlX48ZHnvjJDBNFtMd1I5acwbqT+='


def base64_decode_block(block, encode_table):
    """Base64 decode block (2-4 chars)"""

    block_len = min(4, len(block))
    if block_len < 2:
        raise ValueError('Base64 decode error.')

    n = 0

    for i in range(block_len):
        n <<= 6
        b = encode_table.find(block[i])
        if (b < 0):
            raise ValueError('Base64 invalid char (%02X).' % block[i])
        n |= b

    if block_len == 2:
        dec_block = [n >> 4]
    elif block_len == 3:
        dec_block = [n >> 10, (n >> 2) & 0xFF]
    else:
        dec_block = [n >> 16, (n >> 8) & 0xFF, n & 0xFF]
    return bytes(dec_block)


def base64_decode(data, encode_table = BASE64_CHARS1):
    """Base64 decode data"""

    dec_data = b''

    for block in (data[i : i + 4] for i in range(0, len(data), 4)):
        # Decode block
        dec_data += base64_decode_block(block, encode_table)

    return dec_data


def decrypt(data, key):
    """Decrypt data"""

    x = len(key)
    for c in key:
        x ^= c
    x = (x ^ 0xFF) & 0xFF

    dec_data = bytearray(data)
    for i in range(len(dec_data)):
        dec_data[i] ^= x

    return bytes(dec_data[:i + 1])

#
# Main
#
if __name__ == '__main__':
    import sys
    import io
    import os

    if len(sys.argv) != 2:
        print('Usage:', os.path.basename(sys.argv[0]), 'filename')
        sys.exit(0)

    filename = sys.argv[1]

    with io.open(filename, 'rb') as f:
        data = f.read()

    dec_data = base64_decode(data, BASE64_CHARS2)

    new_filename = filename + '.dec'
    with io.open(new_filename, 'wb') as f:
        f.write(dec_data)

    print('Done!')

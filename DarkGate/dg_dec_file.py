# MIT License
#
# Copyright (c) 2023 Andrey Zhdanov (rivitna)
# https://github.com/rivitna
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import hashlib
import base64
from Crypto.Cipher import AES


KEYLOG_PASSWORD = b'masteroflog'

FILE_PASSWORD_LEN = 8


AES_BLOCK_SIZE = 16


def dcp_derive_aes_key(password):
    """DCPCrypt: Derive AES key"""

    return hashlib.sha1(password).digest() + 4 * b'\0'


def dcp_init_iv(key, iv):
    """DCPCrypt: Init IV"""

    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(iv)


def dcp_aes_cbc_decrypt(enc_data, password):
    """DCPCrypt: Decrypt data (AES CBC)"""

    key = dcp_derive_aes_key(password)
    iv = AES_BLOCK_SIZE * b'\0'
    cv = dcp_init_iv(key, iv)

    data_len = len(enc_data)
    rlen = data_len & 0xF
    blen = data_len - rlen

    dec_data = b''

    if blen != 0:

        cipher = AES.new(key, AES.MODE_CBC, cv)
        dec_data += cipher.decrypt(enc_data[:blen])
        cv = enc_data[blen - AES_BLOCK_SIZE : blen]

    if rlen != 0:

        cv = dcp_init_iv(key, cv)
        last_block = bytearray(enc_data[blen:])
        for i in range(rlen):
            last_block[i] ^= cv[i]
        dec_data += bytes(last_block)

    return dec_data


def dcp_aes_cfb_decrypt(enc_data, password):
    """DCPCrypt: Decrypt data (AES CFB)"""

    key = dcp_derive_aes_key(password)
    iv = AES_BLOCK_SIZE * b'\0'
    cv = dcp_init_iv(key, iv)

    cipher = AES.new(key, AES.MODE_CFB, cv)
    return cipher.decrypt(enc_data)


def decrypt_file(enc_data):
    """Decrypt file data (settings, minercpu2)"""

    password = enc_data[:FILE_PASSWORD_LEN]
    enc_data = enc_data[FILE_PASSWORD_LEN:]
    return dcp_aes_cbc_decrypt(enc_data, password)


def decrypt_keylog(enc_data):
    """Decrypt keylog data"""

    enc_data = base64.b64decode(enc_data)
    dec_data = dcp_aes_cfb_decrypt(enc_data, KEYLOG_PASSWORD)
    return dec_data


#
# Main
#
if __name__ == '__main__':
    import sys
    import io
    import os

    if (len(sys.argv) != 3) or (sys.argv[1] != '-s' and sys.argv[1] != '-k'):
        print('Usage:', os.path.basename(sys.argv[0]), '-s | -k filename')
        sys.exit(0)

    filename = sys.argv[2]

    with io.open(filename, 'rb') as f:
        enc_data = f.read()

    if sys.argv[1] == '-k':
        # Decrypt keylog data
        dec_data = decrypt_keylog(enc_data)
    else:
        # Decrypt file data (settings, minercpu2)
        dec_data = decrypt_file(enc_data)

    new_filename = filename + '.dec'
    with io.open(new_filename, 'wb') as f:
        f.write(dec_data)

    print('Done!')

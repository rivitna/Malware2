import io
import idautils
import idaapi
import dg_dec_data


DEC_STR_FUNC1_EA = 0x455C58
DEC_STR_FUNC2_EA = 0x455068

# Custom Base64 tables
BASE64_CHARS1 = \
    b'GYsyiN0PCntRw8TM7ZIcjWH5xp=+hFd91Dfzu6aE3v2AoXgVUKlme4qbkrJOBSLQ'
BASE64_CHARS2 = \
    b'zLAxuU0kQKf3sWE7ePRO2imyg9GSpVoYC6rhlX48ZHnvjJDBNFtMd1I5acwbqT+='


DEC_STR_FUNC_NAME = 'decode_str'
DEC_STR_FUNC_TYPE = \
    'void __usercall decode_str(void *enc_s@<eax>, void *dest@<edx>)'


def get_mov_arg(arg_ea):

    inst = DecodeInstruction(arg_ea)
    if (inst.itype != idaapi.NN_mov) or (inst.ops[1].type != o_imm):
        return None
    return inst.ops[1].value


def get_encoded_str(call_ea):

    arg_addrs = idaapi.get_arg_addrs(call_ea)
    if arg_addrs is None:
        return None

    enc_str_ea = get_mov_arg(arg_addrs[0])
    if enc_str_ea is None:
        return None

    return enc_str_ea


def decode_strings(dec_str_func_ea, idx, encode_table):

    dec_str_func_name = DEC_STR_FUNC_NAME + str(idx)

    ida_name.set_name(dec_str_func_ea, dec_str_func_name)

    if SetType(dec_str_func_ea, DEC_STR_FUNC_TYPE) == 0:
        raise Exception('Failed to set type of ' + DEC_STR_FUNC_NAME + '.')

    print('Decode function:', dec_str_func_name)

    auto_wait()

    enc_str_count = 0
    dec_str_count = 0

    with io.open('strings%d.txt' % idx, 'wb') as f:

        for xref in CodeRefsTo(dec_str_func_ea, 1):

            enc_str_count += 1

            enc_str_ea = get_encoded_str(xref)
            if (enc_str_ea is None):
                print('%08X: Failed to get encoded string.' % xref)
                continue

            enc_str_len = ida_bytes.get_dword(enc_str_ea - 4)
            enc_str = ida_bytes.get_bytes(enc_str_ea, enc_str_len)
            i = enc_str.find(b'\0')
            if i >= 0:
                enc_str = enc_str[:i]

            dec_s = dg_dec_data.base64_decode(enc_str, encode_table)
            dec_s = dec_s.strip(b'\0')
            f.write(b'%08X: \"%s\"\n' % (enc_str_ea, dec_s))

            try:
                dec_s = dec_s.decode()
            except:
                print('%08X: Failed to decode string.' % xref)
                continue

            s = dec_s.encode('unicode_escape').decode().replace('\"', '\\"')
            set_cmt(enc_str_ea, '\"' + s + '\"', 1)
            set_cmt(xref, '\"' + s + '\"', 1)

            dec_str_count += 1

    print(str(enc_str_count) + ' string(s) found.')
    print(str(dec_str_count) + ' string(s) decoded.')


#
# Main
#
decode_strings(DEC_STR_FUNC1_EA, 1, BASE64_CHARS1)
decode_strings(DEC_STR_FUNC2_EA, 2, BASE64_CHARS2)
